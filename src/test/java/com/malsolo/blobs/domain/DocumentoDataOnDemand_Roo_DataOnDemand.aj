// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.blobs.domain;

import com.malsolo.blobs.domain.Documento;
import com.malsolo.blobs.domain.DocumentoDataOnDemand;
import com.malsolo.blobs.service.DocumentoService;
import java.security.SecureRandom;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DocumentoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DocumentoDataOnDemand: @Component;
    
    private Random DocumentoDataOnDemand.rnd = new SecureRandom();
    
    @Autowired
    DocumentoService DocumentoDataOnDemand.documentoService;
    
    public Documento DocumentoDataOnDemand.getNewTransientDocumento(int index) {
        Documento obj = new Documento();
        setDescripcion(obj, index);
        setFichero(obj, index);
        setLongitud(obj, index);
        setNombre(obj, index);
        setOctetos(obj, index);
        setTipoContenido(obj, index);
        setUri(obj, index);
        return obj;
    }
    
    public void DocumentoDataOnDemand.setDescripcion(Documento obj, int index) {
        String descripcion = "descripcion_" + index;
        obj.setDescripcion(descripcion);
    }
    
    public void DocumentoDataOnDemand.setFichero(Documento obj, int index) {
        String fichero = "fichero_" + index;
        obj.setFichero(fichero);
    }
    
    public void DocumentoDataOnDemand.setLongitud(Documento obj, int index) {
        Long longitud = new Integer(index).longValue();
        obj.setLongitud(longitud);
    }
    
    public void DocumentoDataOnDemand.setNombre(Documento obj, int index) {
        String nombre = "nombre_" + index;
        if (nombre.length() > 100) {
            nombre = nombre.substring(0, 100);
        }
        obj.setNombre(nombre);
    }
    
    public void DocumentoDataOnDemand.setOctetos(Documento obj, int index) {
        byte[] octetos = String.valueOf(index).getBytes();
        obj.setOctetos(octetos);
    }
    
    public void DocumentoDataOnDemand.setTipoContenido(Documento obj, int index) {
        String tipoContenido = "tipoContenido_" + index;
        obj.setTipoContenido(tipoContenido);
    }
    
    public void DocumentoDataOnDemand.setUri(Documento obj, int index) {
        String uri = "uri_" + index;
        if (uri.length() > 100) {
            uri = uri.substring(0, 100);
        }
        obj.setUri(uri);
    }
    
    public Documento DocumentoDataOnDemand.getSpecificDocumento(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Documento obj = data.get(index);
        Long id = obj.getId();
        return documentoService.findDocumento(id);
    }
    
    public Documento DocumentoDataOnDemand.getRandomDocumento() {
        init();
        Documento obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return documentoService.findDocumento(id);
    }
    
    public boolean DocumentoDataOnDemand.modifyDocumento(Documento obj) {
        return false;
    }
    
}
