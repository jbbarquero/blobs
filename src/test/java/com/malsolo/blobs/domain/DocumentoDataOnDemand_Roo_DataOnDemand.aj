// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.blobs.domain;

import com.malsolo.blobs.domain.Documento;
import com.malsolo.blobs.domain.DocumentoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect DocumentoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DocumentoDataOnDemand: @Component;
    
    private Random DocumentoDataOnDemand.rnd = new SecureRandom();
    
    private List<Documento> DocumentoDataOnDemand.data;
    
    public Documento DocumentoDataOnDemand.getNewTransientDocumento(int index) {
        Documento obj = new Documento();
        setContenido(obj, index);
        setDatos(obj, index);
        setDescripcion(obj, index);
        setFichero(obj, index);
        setLongitud(obj, index);
        setNombre(obj, index);
        setUrli(obj, index);
        return obj;
    }
    
    public void DocumentoDataOnDemand.setContenido(Documento obj, int index) {
        String contenido = "contenido_" + index;
        obj.setContenido(contenido);
    }
    
    public void DocumentoDataOnDemand.setDatos(Documento obj, int index) {
        byte[] datos = String.valueOf(index).getBytes();
        obj.setDatos(datos);
    }
    
    public void DocumentoDataOnDemand.setDescripcion(Documento obj, int index) {
        String descripcion = "descripcion_" + index;
        obj.setDescripcion(descripcion);
    }
    
    public void DocumentoDataOnDemand.setFichero(Documento obj, int index) {
        String fichero = "fichero_" + index;
        obj.setFichero(fichero);
    }
    
    public void DocumentoDataOnDemand.setLongitud(Documento obj, int index) {
        Long longitud = new Integer(index).longValue();
        obj.setLongitud(longitud);
    }
    
    public void DocumentoDataOnDemand.setNombre(Documento obj, int index) {
        String nombre = "nombre_" + index;
        if (nombre.length() > 100) {
            nombre = nombre.substring(0, 100);
        }
        obj.setNombre(nombre);
    }
    
    public void DocumentoDataOnDemand.setUrli(Documento obj, int index) {
        String urli = "urli_" + index;
        if (urli.length() > 100) {
            urli = urli.substring(0, 100);
        }
        obj.setUrli(urli);
    }
    
    public Documento DocumentoDataOnDemand.getSpecificDocumento(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Documento obj = data.get(index);
        Long id = obj.getId();
        return Documento.findDocumento(id);
    }
    
    public Documento DocumentoDataOnDemand.getRandomDocumento() {
        init();
        Documento obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Documento.findDocumento(id);
    }
    
    public boolean DocumentoDataOnDemand.modifyDocumento(Documento obj) {
        return false;
    }
    
    public void DocumentoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Documento.findDocumentoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Documento' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Documento>();
        for (int i = 0; i < 10; i++) {
            Documento obj = getNewTransientDocumento(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
